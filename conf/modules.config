/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    SOMA: Nextflow config file for defining module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/


process {

// READ_QC
    withName: FASTQC_PRE {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}_pre" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/read_QC/fastqc/"}, mode: 'copy', pattern: '*_fastqc.*']
        ext.args = { "${params.FASTQC_PRE.args}" }
    }
    withName: FASTP {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.fastp" }
        ext.args = { "${params.FASTP.args}" }
    }


// READ_DECONTAMINATION
    withName: KRAKEN2_HOST {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.kraken2_host" }
        ext.args = { "${params.KRAKEN2_HOST.args}" }
    }
    withName: BWAMEM_HOST {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.bwamem_host" }
        ext.args2 = '-f 4'
        ext.args = { "${params.BWAMEM_HOST.args}" }
    }
    withName: 'SAMTOOLS_BAM2FQ' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.SAMTOOLS_BAM2FQ" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/postQC_reads/"}, mode: 'copy', pattern: "*.fq.gz"]
        ext.args = { "${params.SAMTOOLS_BAM2FQ.args}" }
    }
    withName: FASTQC_POST {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}_post" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/read_QC/fastqc/"}, mode: 'copy', pattern: '*_fastqc.*']
        ext.args = { "${params.FASTQC_POST.args}" }
    }


// READ TYPING
    withName: 'METAMLST' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.metamlst" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/read_typing/metamlst/"}, mode: 'copy', pattern: '*.metamlst_report.tsv']
        ext.args = { "${params.METAMLST.args}" }
    }
    withName: 'CONVERT_METAMLSTTOCC' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.mlsttocc" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/read_typing/metamlst/"}, mode: 'copy']
        ext.args = { "${params.CONVERT_METAMLSTTOCC.args}" }
    }


// READ_QC_SUMMARY
    withName: 'MULTIQC' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.multiqc_report" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/read_QC/multiqc/"}, mode: 'copy', pattern: '*.multiqc_*']
        ext.args = { "${params.MULTIQC.args}" }
    }


// TAXONOMIC_PROFILING
    withName: 'KRAKEN2_TAXPROFILING' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/kraken2"}, pattern: "*.report.txt",  mode: 'copy']
        ext.args = { "${params.KRAKEN2_TAXPROFILING.args}" }
    }
    withName: 'TAXPASTA_STANDARDISE_KRAKEN2' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.taxpasta_kraken2" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/taxpasta"}, pattern: "*.tsv", mode: 'copy']
        ext.args = { "--profiler kraken2 --output '${task.ext.prefix}.tsv' --add-rank --add-name ${params.TAXPASTA_STANDARDISE_KRAKEN2.args}" }
    }
    withName: 'BRACKEN_KRAKEN2' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.bracken_kraken2" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/bracken"}, pattern: "*bracken*", mode: 'copy']
        ext.args = { "${params.BRACKEN_KRAKEN2.args}" }
    }
    withName: 'PLOT_KRAKEN2' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.kraken2" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/taxhits/"}, pattern: "*.html", mode: 'copy']
        ext.args = { "${params.PLOT_KRAKEN2.args}" }
    }
    withName: 'PLOT_KRAKEN2BRACKEN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.kraken2_bracken" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/taxhits/"}, pattern: "*.html", mode: 'copy']
        ext.args = { "${params.PLOT_KRAKEN2BRACKEN.args}" }
    }
    withName: 'CENTRIFUGER_CENTRIFUGER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.centrifuger_out" }
        ext.args = { "${params.CENTRIFUGER_CENTRIFUGER.args}" }
    }
    withName: 'CENTRIFUGER_KREPORT' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.centrifuger" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/centrifuger"},pattern: "*kreport*", mode: 'copy']
        ext.args = { "${params.CENTRIFUGER_KREPORT.args}" }
    }
    withName: 'BRACKEN_CENTRIFUGER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.bracken_centrifuger" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/bracken"}, pattern: "*bracken*" ,mode: 'copy']
        ext.args = { "${params.BRACKEN_CENTRIFUGER.args}" }
    }
    withName: 'TAXPASTA_STANDARDISE_CENTRIFUGER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.taxpasta_centrifuger" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/taxpasta"}, pattern: "*taxpasta*", mode: 'copy']
        ext.args = { "--profiler centrifuge --output '${task.ext.prefix}.tsv' --add-rank --add-name ${params.TAXPASTA_STANDARDISE_CENTRIFUGER.args}" }
    }
    withName: 'PLOT_CENTRIFUGER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.centrifuger" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/taxhits/"}, pattern: "*.html", mode: 'copy']
        ext.args = { "${params.PLOT_CENTRIFUGER.args}" }
    }
    withName: 'PLOT_CENTRIFUGERBRACKEN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.centrifuger_bracken" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/taxhits/"}, pattern: "*.html", mode: 'copy']
        ext.args = { "${params.PLOT_CENTRIFUGERBRACKEN.args}" }
    }
    withName: 'PARSE_KRAKEN2HITS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/relevant_hits/"}, pattern: "*.target_species.tsv", mode: 'copy']
        ext.args = { "${params.PARSE_KRAKEN2HITS.args}" }
    }
    withName: 'PARSE_CENTRIFUGERHITS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/relevant_hits/"}, pattern: "*.target_species.tsv", mode: 'copy']
        ext.args = { "${params.PARSE_CENTRIFUGERHITS.args}" }
    }
    withName: 'PLOT_TAXHITS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.taxhits" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/"}, pattern: "*.html", mode: 'copy']
        ext.args = { "${params.PLOT_TAXHITS.args}" }
    }


// ASSEMBLY
    withName: MEGAHIT {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.megahit" }
        ext.args = { "--presets ${params.MEGAHIT.presets} --min-contig-len ${params.MEGAHIT.min_contig_len} ${params.MEGAHIT.args}" }
    }
    withName: SEQTK_RENAME {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.rn" }
        ext.args = { "${params.SEQTK_RENAME.args}" }
        ext.args3 = 'cut -f1 -d " " |'
    }
    withName: BWAMEM2_INDEX_MAG_S1 {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.bwamem2_ims1" }
        ext.args = { "${params.BWAMEM2_INDEX_MAG_S1.args}" }
    }
    withName: BWAMEM2_MEM_MAG_S1 {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.bwamem2_ms1" }
        ext.args = { "${params.BWAMEM2_MEM_MAG_S1.args}" }
    }
    withName: SAMTOOLS_INDEX_MAG_S1 {
        errorStrategy = 'ignore'
        ext.args = { "${params.SAMTOOLS_INDEX_MAG_S1.args}" }
    }


// ASSIGN BINS
    withName: TIARA_TIARA {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.tiara" }
        ext.args = { "${params.TIARA_TIARA.args}" }
    }
    withName: FILTER_CONTIGS {
        errorStrategy = 'ignore'
        ext.args = { "${params.FILTER_CONTIGS.args}" }
    }
    withName: METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS {
        errorStrategy = 'ignore'
        ext.args = { "${params.METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS.args}" }
    }
    withName: METABAT2_METABAT2 {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.metabat2" }
        ext.args = { "${params.METABAT2_METABAT2.args}" }
    }
    withName: SEMIBIN_SINGLEEASYBIN {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.semibin" }
        ext.args = { "${params.SEMIBIN_SINGLEEASYBIN.args}" }
        ext.args3 = {"--environment ${params.SEMIBIN_SINGLEEASYBIN.environment}" }
    }
    withName: FILTER_BAM_HEADER  {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.FBH" }
        ext.args = { "${params.FILTER_BAM_HEADER.args}" }
    }
    withName: COMEBIN  {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.comebin" }
        ext.args = { "${params.COMEBIN.args}" }
    }
    withName: DASTOOL_FASTATOCONTIG2BIN_SEMIBIN2 {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.semibin2" }
        ext.args = { "${params.DASTOOL_FASTATOCONTIG2BIN_SEMIBIN2.args}" } 
   }
    withName: DASTOOL_FASTATOCONTIG2BIN_METABAT2 {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.metabat2" }
        ext.args = { "${params.DASTOOL_FASTATOCONTIG2BIN_METABAT2.args}" }
    }
    withName: DASTOOL_DASTOOL {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.dastool" }
        ext.args = { "--score_threshold=${params.DASTOOL.score_threshold} --write_bins ${params.DASTOOL_DASTOOL.args}" }
    }
    withName: FETCH_UNBINNED {
        errorStrategy = 'ignore'
        ext.args = { "${params.FETCH_UNBINNED.args}" }
    }
    withName: RENAME_CONTIGS {
        errorStrategy = 'ignore'
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/"}, pattern: "*.complete_assembly.fasta", mode: 'copy']
        ext.args = { "${params.RENAME_CONTIGS.args}" }
    }


// CONTIG_QC
    withName: BWAMEM2_INDEX_MAG_S2 {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.bwamem2_ims2" }
        ext.args = { "${params.BWAMEM2_INDEX_MAG_S2.args}" }
    }
    withName: BWAMEM2_MEM_MAG_S2 {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.bwamem2_ms2" }
//        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/contig_qc/mapped_reads/"}, pattern: "*.bam", mode: 'copy']
        ext.args = { "${params.BWAMEM2_MEM_MAG_S2.args}" }
    }
    withName: 'GENOMAD_ENDTOEND' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.geNomad" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/contig_qc/genomad"}, pattern: "*/*.complete*", mode: 'copy']
        ext.args = { "${params.GENOMAD_ENDTOEND.args}" }
    }
    withName: 'SKANI_SEARCH' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/contig_qc/skani"}, pattern: "*.skani_results.txt", mode: 'copy']
        ext.args = { "${params.SKANI_SEARCH.args}" }
    }
    withName: 'SEQKIT_FX2TAB' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.seqkit" }
        ext.args = { "-ngl -C N ${params.SEQKIT_FX2TAB.args}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/contig_qc/contig_stats/"}, mode: 'copy']
    }
    withName: 'SAMTOOLS_COVERAGE' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.coverage" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/contig_qc/coverage/"}, pattern: "*.coverage.txt", mode: 'copy']
        ext.args = { "${params.SAMTOOLS_COVERAGE.args}" }
    }


// BIN QC
    withName: 'CHECKM_LINEAGEWF' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.checkm" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/bin_QC/checkm"}, mode: 'copy', pattern: '*.tsv']
        ext.args = { "${params.CHECKM_LINEAGEWF.args}" }
    }
    withName: 'GTDBTK_CLASSIFYWF' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.gtdbtk" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/bin_QC/gtdbtk"}, mode: 'copy', pattern: '*.tsv']
        ext.args = { "--extension fasta ${params.GTDBTK_CLASSIFYWF.args}" }
    }
    withName: 'ASSEMBLY_STATS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/bin_QC/assembly_stats"}, pattern: "*.csv", mode: 'copy']
        ext.args = { "${params.ASSEMBLY_STATS.args}" }
    }
    withName: 'QUAST' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.quast" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/bin_QC/QUAST"}, pattern: "*.quast", mode: 'copy']
        ext.args = { "${params.QUAST.args}" }
    }
    withName: 'PLOT_BINS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/"}, pattern: "*summary*", mode: 'copy']
        ext.args = { "${params.PLOT_BINS.args}" }
    }
    withName: 'INSTRAIN_PROFILE' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.instrain" }
        publishDir = [path: {"${params.outdir}/${meta.id}/assembly/contig_qc/instrain/"}, mode: 'copy']
        ext.args = '--skip_mm_profiling'
    }




// BIN_TAXONOMY
    withName: 'ASSIGN_TAXONOMY' {
        errorStrategy = 'ignore'
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/bin_QC/assign_taxonomy/"}, pattern: "*.txt", mode: 'copy']
        ext.args = { "${params.ASSIGN_TAXONOMY.args}" }
    }
    withName: 'FILTER_BAM' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.filtered" }
        ext.args = { "${params.FILTER_BAM.args}" }
    }


// BACTERIAL_TYPING
//// AMR_TYPING
    withName: 'AMRFINDERPLUS_RUN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.filtered" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/amrfinderplus/"}, pattern: "*.tsv" , mode: 'copy']
        ext.args = { "${params.AMRFINDERPLUS_RUN.args}" }
    }
    withName: 'ABRICATE_RUN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.abricate" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/abricate/"}, pattern: "*.abricate.txt", mode: 'copy']
        ext.args = { "${params.ABRICATE_RUN.args}" }
    }
    withName: 'RGI_MAIN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.rgi" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/rgi/"}, pattern: "*rgi*", mode: 'copy']
        ext.args = { "${params.RGI_MAIN.args}" }
    }
    withName: 'RESFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.resfinder" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/resfinder/"}, pattern: "*.txt", mode: 'copy']
        ext.args = { "${params.RESFINDER.args}" }
    }
    withName: 'HAMRONIZATION_ABRICATE' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/hamronization/"}, pattern: "*.tsv", mode: 'copy']
        ext.args = { "${params.HAMRONIZATION_ABRICATE.args}" }
    }
    withName: 'HAMRONIZATION_RGI' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/hamronization/"}, pattern: "*.tsv", mode: 'copy']
        ext.args = { "${params.HAMRONIZATION_RGI.args}" }
    }
    withName: 'HAMRONIZATION_AMRFINDERPLUS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/hamronization/"}, pattern: "*.tsv", mode: 'copy']
        ext.args = { "${params.HAMRONIZATION_AMRFINDERPLUS.args}" }
    }
    withName: 'HAMRONIZATION_RESFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/hamronization/"}, pattern: "*.tsv", mode: 'copy']
        ext.args = { "${params.HAMRONIZATION_RESFINDER.args}" }
    }
    withName: 'HAMRONIZATION_POINTFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/hamronization/"}, pattern: "*.tsv", mode: 'copy']
        ext.args = { "${params.HAMRONIZATION_POINTFINDER.args}" }
    }
    withName: 'HAMRONIZATION_SUMMARIZE' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.summarize" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/hamronization/"}, pattern: '*.hamronization_combined_report.*', mode: 'copy']
        ext.args = { "${params.HAMRONIZATION_SUMMARIZE.args}" }
    }

// SEQUENCE_TYPING
    withName: 'MLST' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.mlst" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/mlst/mlst/"}, pattern: "*.tsv",mode: 'copy']
        ext.args = { "${params.MLST.args}" }
    }
    withName: 'CONVERT_MLSTTOCC' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.mlsttocc" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/mlst/mlst/"}, pattern: "*.tsv",mode: 'copy']
        ext.args = { "${params.CONVERT_MLSTTOCC.args}" }
    }

//    withName: 'SRST2_SRST2' {
//        errorStrategy = 'ignore'
//        maxForks = 1
//        ext.prefix = { "${meta.id}.srst2" }
//        publishDir = [path: {"${params.outdir}/${meta.id}/assembly/typing/${meta.bin}/mlst/srst/"}, mode: 'copy']
//    }

// TARGETED_TYPING
    withName: 'PLASMIDFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.plasmidfinder" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/plasmidfinder/"}, pattern: "*plasmidfinder*", mode: 'copy']
        ext.args = { "${params.PLASMIDFINDER.args}" }
    }
    withName: 'VIRULENCEFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.plasmidfinder" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/virulencefinder/"}, mode: 'copy']
        ext.args = { "-x ${params.VIRULENCEFINDER.args}" }
    }
    withName: 'BLAST_BLASTN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.blastn" }
        ext.args = { " -outfmt '6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore slen' ${params.BLASTN_BLASTN.args}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/blast/"}, pattern: "*blastn*", mode: 'copy']
    }
    withName: 'FILTER_BLAST' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.filterblast" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/blast/"}, mode: 'copy']
        ext.args = { "${params.FILTER_BLAST.args}" }
    }
    withName: 'SUMMARIZE_GENEFINDING' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/genefinding/"}, mode: 'copy']
        ext.args = { "${params.SUMMARIZE_GENEFINDING.args}" }
    }

// ECOLI_TYPING
    withName: 'ECTYPER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.ectyper" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/ectyper"}, pattern: "*.ectyper.*", mode: 'copy']
        ext.args = { "${params.ECTYPER.args}" }
    }
    withName: 'STECFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.stecfinder" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/stecfinder"}, pattern: "*.stecfinder.tsv", mode: 'copy']
        ext.args = { "${params.STECFINDER.args}" }
    }
    withName: 'SHIGEIFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.shigeifinder" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/shigeifinder"}, pattern: "*.shigeifinder.*", mode: 'copy']
        ext.args = { "${params.SHIGEIFINDER.args}" }
    }
    withName: 'MYKROBE_PREDICT_SSONNEI' {
        errorStrategy = 'ignore'
        container = "/data/PROJECTS/DB_ONT_PIPELINE_TEST/loma_v0.2/mykrobe_master.sif"
        ext.prefix = { "${meta.id}.${meta.bin}.mykrobe" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/mykrobe/"}, pattern: "*.ectyper.*", mode: 'copy']
        ext.args = { "${params.MYKROBE_PREDICT_SSONNEI.args}" }
    }
    withName: 'SHIGATYPER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.shigatyper" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/shigatyper"}, pattern: "*.shigatyper.*", mode: 'copy']
        ext.args = { "${params.SHIGATYPER.args}" }
    }
    withName: 'FILTER_ECOLI' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/ecoli_typing"}, mode: 'copy']
        ext.args = { "${params.FILTER_ECOLI.args}" }
    }



// SALMONELLA_TYPING
    withName: 'MYKROBE_PREDICT_STYPHI' {
        errorStrategy = 'ignore'
        container = "/data/PROJECTS/DB_ONT_PIPELINE_TEST/loma_v0.2/mykrobe_master.sif"
        ext.prefix = { "${meta.id}.${meta.bin}.mykrobe" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/mykrobe/"}, mode: 'copy']
        ext.args = { "${params.MYKROBE_PREDICT_STYPHI.args}" }
    }
    withName: 'MYKROBE_PREDICT_SPARATYPHIB' {
        errorStrategy = 'ignore'
        container = "/data/PROJECTS/DB_ONT_PIPELINE_TEST/loma_v0.2/mykrobe_master.sif"
        ext.prefix = { "${meta.id}.${meta.bin}.mykrobe" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/mykrobe/"}, mode: 'copy']
        ext.args = { "${params.MYKROBE_PREDICT_SPARATYPHIB.args}" }
    }
    withName: 'SEQSERO2' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.seqsero2" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/seqsero2"}, mode: 'copy']
        ext.args = { "-m k -t 5 ${params.SEQOSEQ2.args}" }
    }
    withName: 'SISTR' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.sistr" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/sistr/"}, mode: 'copy']
        ext.args = { "${params.SISTR.args}" }
    }
    withName: 'FILTER_TYPING_SALMONELLA' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/salmonella_typing"}, mode: 'copy']
        ext.args = { "${params.FILTER_TYPING_SALMONELLA.args}" }
    }
    withName: 'FILTER_SALMONELLA' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/salmonella_typing"}, mode: 'copy']
        ext.args = { "${params.FILTER_SALMONELLA.args}" }
    }

// LMONOCYTOGENES_TYPING
    withName: 'LISSERO' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.lissero" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/lissero/"}, mode: 'copy']
        ext.args = { "${params.LISSERO.args}" }
    }


// CREATE_REPORT
    withName: 'SUMMARIZE_RESULTS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.run_id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/"}, mode: 'copy']
        ext.args = { "${params.SUMMARIZE_RESULTS.args}" }
    }
    withName: 'SUMMARIZE_AMR' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.run_id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/"}, mode: 'copy', pattern: '*.html']
        ext.args = { "${params.SUMMARIZE_AMR.args}" }
    }


// CUSTOM_DUMPSOFTWAREVERSIONS
    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        errorStrategy = 'ignore'
        publishDir = [path: {"${params.outdir}/logs/"}, mode: 'copy']
        ext.args = { "${params.CUSTOM_DUMPSOFTWAREVERSIONS.args}" }
    }

}
